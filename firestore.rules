rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Sessions collection rules
    match /sessions/{sessionId} {
      // Allow anyone to read sessions (active for joining, ended for cleanup)
      allow read: if true;
      
      // Allow authenticated users to create sessions (hosts only)
      allow create: if request.auth != null;
      
      // Allow session updates if user is authenticated or for participant updates
      allow update: if request.auth != null 
        || isParticipantOnlyUpdate();
      
      // Only allow authenticated users to delete sessions
      allow delete: if request.auth != null;
    }
    
    // Helper function to check if this is just a participant update
    function isParticipantOnlyUpdate() {
      let allowedFields = ['participants', 'updatedAt'];
      let changedFields = request.resource.data.diff(resource.data).changedKeys();
      
      // Check if only allowed fields are being changed
      return changedFields.hasOnly(allowedFields);
    }
    
    // User sessions subcollection (for dashboard history)  
    match /userSessions/{userId}/sessions/{sessionId} {
      // Users can only access their own session history
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Teams collection (future feature)
    match /teams/{teamId} {
      // Team owners and members can read
      allow read: if request.auth != null;
      
      // Only authenticated users can write
      allow write: if request.auth != null;
    }
    
    // User profiles collection
    match /users/{userId} {
      // Users can only access their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}