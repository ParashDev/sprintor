rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Sessions collection rules
    match /sessions/{sessionId} {
      // Allow anyone to read sessions (active for joining, ended for cleanup)
      allow read: if true;
      
      // Allow authenticated users to create sessions (hosts only)
      allow create: if request.auth != null;
      
      // Allow session updates if user is authenticated or for participant updates
      allow update: if request.auth != null 
        || isParticipantOnlyUpdate();
      
      // Only allow authenticated users to delete sessions
      allow delete: if request.auth != null;
    }
    
    // Session stories collection (separate from sessions)
    match /sessionStories/{sessionId} {
      // Allow anyone to read/write session stories subcollections
      allow read, write: if true;
      
      match /stories/{storyId} {
        // Allow anyone to read/write individual session stories  
        allow read, write: if true;
      }
    }
    
    // Helper function to check if this is just a participant update
    function isParticipantOnlyUpdate() {
      let allowedFields = ['participants', 'updatedAt', 'stories', 'metrics', 'isActive', 'votingInProgress', 'votesRevealed', 'currentStoryId'];
      let changedFields = request.resource.data.diff(resource.data).changedKeys();
      
      // Check if only allowed fields are being changed
      return changedFields.hasOnly(allowedFields);
    }
    
    // User sessions subcollection (for dashboard history)  
    match /userSessions/{userId}/sessions/{sessionId} {
      // Users can only access their own session history
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Teams collection (future feature)
    match /teams/{teamId} {
      // Team owners and members can read
      allow read: if request.auth != null;
      
      // Only authenticated users can write
      allow write: if request.auth != null;
    }
    
    // User profiles collection
    match /users/{userId} {
      // Users can only access their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Allow authenticated users to read projects they own
      allow read: if request.auth != null && resource.data.ownerId == request.auth.uid;
      
      // Allow authenticated users to create projects
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      
      // Allow project owners to update their projects
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      
      // Allow project owners to delete their projects
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Stories collection
    match /stories/{storyId} {
      // Allow read/write if user owns the project
      allow read, write: if request.auth != null && 
        ((request.resource.data.projectId != null && isProjectOwner(request.resource.data.projectId)) ||
         (resource != null && resource.data.projectId != null && isProjectOwner(resource.data.projectId)));
    }
    
    // Epics collection
    match /epics/{epicId} {
      // Allow read/write if user owns the project
      allow read, write: if request.auth != null && 
        ((request.resource.data.projectId != null && isProjectOwner(request.resource.data.projectId)) ||
         (resource != null && resource.data.projectId != null && isProjectOwner(resource.data.projectId)));
    }
    
    // Story templates collection
    match /storyTemplates/{templateId} {
      // Allow all authenticated users to read templates
      allow read: if request.auth != null;
      
      // Allow any authenticated user to create templates (global or project-specific)
      allow create: if request.auth != null;
      
      // Allow any authenticated user to update templates (for now, can be restricted later)
      allow update: if request.auth != null;
      
      // Allow any authenticated user to delete templates (for now, can be restricted later)  
      allow delete: if request.auth != null;
    }
    
    // Helper function to check if user owns a project
    function isProjectOwner(projectId) {
      return projectId != null && 
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}